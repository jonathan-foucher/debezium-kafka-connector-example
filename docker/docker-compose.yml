services:
  zookeeper:
    image: bitnami/zookeeper:latest
    tmpfs: /datalog
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    healthcheck:
      test: nc -w 3 localhost 2181 || exit 1
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 10s
    networks:
      - kafka
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 128M
  kafka:
    image: bitnami/kafka:latest
    ports:
      - '9092:9092'
      - '9093:9093'
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server 127.0.0.1:9092
      interval: 10s
      retries: 5
      start_period: 10s
      timeout: 30s
    networks:
      - kafka
    deploy:
      resources:
        limits:
          memory: 3072M
        reservations:
          memory: 1536M
    depends_on:
      zookeeper:
        condition: service_healthy
  debezium:
    image: debezium/connect:2.6
    ports:
      - '8183:8083'
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=debezium-connector
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses
      - CONNECT_KEY_CONVERTER_SCHEMAS_ENABLE=false
      - CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE=false
    healthcheck:
      test: curl --fail http://localhost:8083 || exit 1
      interval: 30s
      retries: 3
      start_period: 20s
      timeout: 10s
    networks:
      - kafka
    deploy:
      resources:
        limits:
          memory: 1536M
        reservations:
          memory: 512M
    depends_on:
      kafka:
        condition: service_healthy
  init-kafka:
    image: confluentinc/cp-kafka:latest
    volumes:
      - ./connectors:/opt/docker/connectors
    networks:
      - kafka
    depends_on:
      - kafka
      - debezium
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      cub kafka-ready -b kafka:9092 1 60
      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic debezium_example_my_database_heartbeat --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic debezium_example_my_database_movie --replication-factor 1 --partitions 6
      
      cub connect-ready debezium 8083 60
      if [[ \\
        `curl --write-out '%{http_code}' --silent --output /dev/null \\
          --request GET http://debezium:8083/connectors/movie-connector \\
          --header 'Accept: application/json'` \\
        == 404 ]]; then
        curl --request POST http://debezium:8083/connectors \\
        --header Accept:application/json \\
        --header Content-Type:application/json \\
        --data-binary @/opt/docker/connectors/movie-connector.json
      fi
      "
  akhq:
    image: tchiotludo/akhq:latest
    ports:
      - '8190:8080'
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: kafka:9092
              ui-options:
                topic-data:
                  sort: NEWEST
    links:
      - kafka
    networks:
      - kafka
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 256M
    depends_on:
      - kafka

networks:
  kafka:
    name: kafka
